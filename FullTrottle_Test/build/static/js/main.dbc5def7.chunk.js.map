{"version":3,"sources":["components/Calender.js","components/Users.js","components/Header.js","App.js","registerServiceWorker.js","index.js"],"names":["Calender","props","active","onChange","date","setState","date1","toString","substring","i","state","active_dates","length","start","status","Date","push","start_time","end","end_time","info","this","style","color","className","value","Component","Users","users","open","selectedUser","load_API","a","axios","get","data","members","dialog","handleClose","Dialog","onClose","aria-labelledby","DialogTitle","id","real_name","DialogContent","activity_periods","DialogActions","Button","onClick","variant","handleClickOpen","user","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","white","fontSize","fontStyle","body","TableCell","StyledTableRow","root","background","default","TableRow","rows","map","userId","userName","userInfo","TableContainer","component","Paper","Table","aria-label","TableHead","align","TableBody","row","key","scope","Header","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kfAsDeA,G,8DAjDb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAURC,OAAS,GAXU,EAYnBC,SAAW,SAAAC,GACT,EAAKC,SAAS,CAACD,SAEf,IADA,IAAIE,EAAQF,EAAKG,WAAWC,UAAU,EAAG,IAChCC,EAAI,EAAGA,EAAI,EAAKC,MAAMC,aAAaC,OAAQH,IAAK,CACvD,GAAI,EAAKC,MAAMC,aAAaF,GAAGI,MAAML,UAAU,EAAG,MAAQF,EAAO,CAC/D,EAAKD,SAAS,CAAES,QAAQ,IACxB,EAAKZ,OAAS,EAAKQ,MAAMC,aAAaF,GACtC,MAGA,EAAKJ,SAAS,CAAES,QAAQ,IACxB,EAAKZ,OAAS,KArBlB,EAAKQ,MAAQ,CACXN,KAAM,IAAIW,KACVJ,aAAc,GACdG,QAAQ,GAEV,IAAK,IAAIL,EAAI,EAAGA,EAAI,EAAKR,MAAMC,OAAOU,OAAQH,IAC5C,EAAKC,MAAMC,aAAaK,KAAK,CAAEH,MAAO,EAAKZ,MAAMC,OAAOO,GAAGQ,WAAYC,IAAK,EAAKjB,MAAMC,OAAOO,GAAGU,WARlF,S,qDA4BjB,IAAIC,EAAO,KAOX,OALEA,EADEC,KAAKX,MAAMI,OACL,yBAAKQ,MAAO,CAAEC,MAAO,UAAW,uDAA6BF,KAAKnB,OAAOW,MAAML,UAAU,IAAzD,OAAmEa,KAAKnB,OAAOgB,IAAIV,UAAU,MAG7H,yBAAKc,MAAO,CAAEC,MAAO,QAAS,mEAGtC,yBAAKC,UAAU,OACb,kBAAC,IAAD,CACErB,SAAUkB,KAAKlB,SACfsB,MAAOJ,KAAKX,MAAMN,OAEpB,yBAAKoB,UAAU,UACZJ,Q,GA3CYM,cCsHRC,E,kDAtGX,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IACDS,MAAQ,CACTkB,MAAO,GACPC,MAAM,EACNC,aAAc,MAElB,EAAKC,WAPU,E,uDASP,IAAD,OACP,sBAAC,sBAAAC,EAAA,kEACG,EADH,SACiCC,IAAMC,IAAI,oBAD3C,mBACgEC,KAAKC,QADrE,MACmBR,MADnB,WACQvB,SADR,0DAAD,K,+BAIM,IAAD,OACDgC,EAAS,KACb,GAAIhB,KAAKX,MAAMoB,aAAc,CACzB,IAAMQ,EAAc,WAChB,EAAKjC,SAAS,CAAEwB,MAAM,KAE1BQ,EACI,6BACI,kBAACE,EAAA,EAAD,CAAQV,KAAMR,KAAKX,MAAMmB,KAAMW,QAASF,EAAaG,kBAAgB,2BACjE,kBAACC,EAAA,EAAD,CAAaC,GAAG,2BAAhB,cAAsDtB,KAAKX,MAAMoB,aAAac,WAC9E,kBAACC,EAAA,EAAD,KACQ,kBAAC,EAAD,CAAU3C,OAAQmB,KAAKX,MAAMoB,aAAagB,oBAElD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QAASX,EAAaY,QAAQ,YAAY3B,MAAM,WAAxD,YAQpB,IAAM4B,EAAkB,SAACC,GACrB,OAAO,WACH,EAAK/C,SAAS,CAAEwB,MAAM,EAAMC,aAAcsB,MAG5CC,EAAkBC,aAAW,SAAAC,GAAK,MAAK,CACzCC,KAAM,CACFC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCrC,MAAOgC,EAAMG,QAAQC,OAAOE,MAC5BC,SAAU,GACVC,UAAW,UAEfC,KAAM,CACFF,SAAU,OARMR,CAUpBW,KACEC,EAAiBZ,aAAW,SAAAC,GAAK,MAAK,CACxCY,KAAM,CACF,qBAAsB,CAClBV,gBAAiBF,EAAMG,QAAQU,WAAWC,aAH/Bf,CAMnBgB,KAIJ,IAAMC,EAAO,GASb,OARAlD,KAAKX,MAAMkB,MAAM4C,KAAI,SAACpB,GAClB,OACImB,EAAKvD,MANOyD,EAMSrB,EAAKT,GANN+B,EAMUtB,EAAKR,UANL+B,EAO1B,kBAAC3B,EAAA,EAAD,CAAQE,QAAQ,YAAY3B,MAAM,UAAU0B,QAASE,EAAgBC,IAArE,aAND,CAAEqB,SAAQC,WAAUC,cAD/B,IAAoBF,EAAQC,EAAUC,KAalC,6BACI,wBAAInD,UAAU,MAAd,qBACA,yBAAKA,UAAU,SACX,kBAACoD,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,EAAA,EAAD,CAAOC,aAAW,oBACd,kBAACC,EAAA,EAAD,KACI,kBAACX,EAAA,EAAD,KACI,kBAACjB,EAAD,kBACA,kBAACA,EAAD,CAAiB6B,MAAM,SAAvB,UAGR,kBAACC,EAAA,EAAD,KACKZ,EAAKC,KAAI,SAAAY,GAAG,OACT,kBAAClB,EAAD,CAAgBmB,IAAKD,EAAIX,QACrB,kBAACpB,EAAD,CAAiBwB,UAAU,KAAKS,MAAM,OACjCF,EAAIV,UAET,kBAACrB,EAAD,CAAiB6B,MAAM,SAASE,EAAIT,kBAO3DtC,O,GAjGGX,a,MCRL6D,MARf,WACI,OACI,yBAAK/D,UAAU,UACX,mDCUGgE,G,6KATX,OACE,yBAAKhE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUE,cCKZ+D,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7F,QACfuF,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAgB,SDcpC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEN3B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAAS1G,SACuD,IAAhE0G,EAASC,QAAQvF,IAAI,gBAAgBwF,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvB,MAAK,SAAAC,GACjCA,EAAauB,aAAaxB,MAAK,WAC7BT,OAAOC,SAASiC,eAKpB9B,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAkB,CAAwB9B,GAHxBD,EAAgBC,OC7BxB+B,K","file":"static/js/main.dbc5def7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport './Calender.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nclass Calender extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: new Date(),\r\n      active_dates: [],\r\n      status: false,\r\n    }\r\n    for (let i = 0; i < this.props.active.length; i++) {\r\n      this.state.active_dates.push({ start: this.props.active[i].start_time, end: this.props.active[i].end_time });\r\n    }\r\n  }\r\n  active = {};\r\n  onChange = date => {\r\n    this.setState({date})\r\n    let date1 = date.toString().substring(4, 15);\r\n    for (let i = 0; i < this.state.active_dates.length; i++) {\r\n      if (this.state.active_dates[i].start.substring(0, 11) === date1) {\r\n        this.setState({ status: true })\r\n        this.active = this.state.active_dates[i];\r\n        break;\r\n      }\r\n      else {\r\n        this.setState({ status: false })\r\n        this.active = {};\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    let info = null;\r\n    if (this.state.status) {\r\n      info = (<div style={{ color: 'green' }}><b>The User was Active from {this.active.start.substring(12,)} to {this.active.end.substring(12,)}</b></div>);\r\n    }\r\n    else {\r\n      info = (<div style={{ color: 'red' }}><b>The User was Not Active on this Day</b></div>);\r\n    }\r\n    return (\r\n      <div className='cal'>\r\n        <Calendar\r\n          onChange={this.onChange}\r\n          value={this.state.date}\r\n        />\r\n        <div className='status'>\r\n          {info}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calender;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './User.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Calender from './Calender';\r\n\r\n\r\nclass Users extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            open: false,\r\n            selectedUser: null\r\n        }\r\n        this.load_API();\r\n    }\r\n    load_API() {\r\n        (async () => {\r\n            this.setState({ users: (await axios.get('./Test_JSON.json')).data.members });\r\n        })();\r\n    }\r\n    render() {\r\n        let dialog = null;\r\n        if (this.state.selectedUser) {\r\n            const handleClose = () => {\r\n                this.setState({ open: false });\r\n            };\r\n            dialog = (\r\n                <div>\r\n                    <Dialog open={this.state.open} onClose={handleClose} aria-labelledby=\"customized-dialog-title\">\r\n                        <DialogTitle id=\"customized-dialog-title\">User Name: {this.state.selectedUser.real_name}</DialogTitle>\r\n                        <DialogContent>\r\n                                <Calender active={this.state.selectedUser.activity_periods} />\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n                                Close\r\n                 </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </div>\r\n            )\r\n        }\r\n        const handleClickOpen = (user) => {\r\n            return () => {\r\n                this.setState({ open: true, selectedUser: user });\r\n            }\r\n        };\r\n        const StyledTableCell = withStyles(theme => ({\r\n            head: {\r\n                backgroundColor: theme.palette.common.black,\r\n                color: theme.palette.common.white,\r\n                fontSize: 25,\r\n                fontStyle: 'italic'\r\n            },\r\n            body: {\r\n                fontSize: 20,\r\n            },\r\n        }))(TableCell);\r\n        const StyledTableRow = withStyles(theme => ({\r\n            root: {\r\n                '&:nth-of-type(odd)': {\r\n                    backgroundColor: theme.palette.background.default,\r\n                },\r\n            },\r\n        }))(TableRow);\r\n        function createData(userId, userName, userInfo) {\r\n            return { userId, userName, userInfo };\r\n        }\r\n        const rows = [];\r\n        this.state.users.map((user) => {\r\n            return (\r\n                rows.push(createData(user.id, user.real_name,\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpen(user)}>User INFO</Button>)\r\n                )\r\n            )\r\n        }\r\n        )\r\n        return (\r\n            <div>\r\n                <h1 className='h1'>Users Information</h1>\r\n                <div className='table'>\r\n                    <TableContainer component={Paper}>\r\n                        <Table aria-label=\"customized table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <StyledTableCell>User Name</StyledTableCell>\r\n                                    <StyledTableCell align=\"right\" >Info</StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {rows.map(row => (\r\n                                    <StyledTableRow key={row.userId}>\r\n                                        <StyledTableCell component=\"th\" scope=\"row\">\r\n                                            {row.userName}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"right\">{row.userInfo}</StyledTableCell>\r\n                                    </StyledTableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </div>\r\n                {dialog}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className='header'>\r\n            <h1>FullThrottle Labs</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react';\nimport Users from './components/Users';\nimport Header from './components/Header';\nimport './App.css'\n\nclass App extends Component { \n  render() {\n    return (\n      <div className='app'>\n        <Header />\n        <Users />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}